apply from: 'gradle/property_helper.gradle'

repositories {
    maven {

        url 'https://maven.blamejared.com'
    }
}

dependencies {
    
    // This section includes mods that are commonly compiled against. It is 
    // recommended to add support for these mods if it makes sense for the 
    // content of your mod.
    if (getDefaultBoolean('dependencies_compile_enabled')) {
        
        // Bookshelf is a general purpose library mod. It provides many helpers
        // and frameworks for other mods to work with. There are also in game
        // debug commands under /bookshelf.
        deobfCompile('bookshelf', 'net.darkhax.bookshelf', 'Bookshelf-Forge-'+project.ext.mcVersion, '16.+')
        
        // CraftTweaker is a scripting framework for Minecraft. Mods are 
        // encouraged to add support for their new recipe types, events, and 
        // other game mechanics.
        deobfCompile('crafttweaker', 'com.blamejared.crafttweaker', 'CraftTweaker-forge-'+project.ext.mcVersion, '10.+')
        
        // GameStages is a framework for modpack progression frameworks. Mods
        // can use the API to check which flags a player has enabled. This mod
        // has a hard requirement on Bookshelf.        
        deobfCompile('gamestages', 'net.darkhax.gamestages', 'GameStages-Forge-'+project.ext.mcVersion, '11.+')
    }
}

/**
 * Creates a deobfuscated compile dependency. These are available at compile
 * time and runtime. This means you can reference code from this dependency
 * in your mod.
 *
 * See deobfDep for more info.
 */
def deobfCompile(modid, defaultGroup, defaultName, defaultVersion) {

    deobfDep(modid, 'implementation', defaultGroup, defaultName, defaultVersion)
}

/**
 * Creates a deobfuscated runtime dependency. These are only available during 
 * runtime and not compile time. This means the dependency will show up when
 * you run the game but you can not directly reference it's code in your mod.
 * 
 * See deobfDep for more info.
 */
def deobfRuntime(modid, defaultGroup, defaultName, defaultVersion) {

    deobfDep(modid, 'runtimeOnly', defaultGroup, defaultName, defaultVersion)
}

/**
 * Creates a new deobfuscated project dependency that is configured using 
 * properties. This allows for greater flexability and additional logging.
 *
 * | Property      | Description                                       | Example               |
 * |---------------|---------------------------------------------------|-----------------------|
 * | modid_enabled | When set to false the dependency will be skipped. | true/false, y/n, 1/0  |
 * | modid_deptype | The type of dependency to create.                 | compile, runtimeOnly  |
 * | modid_group   | The maven group for the dependency.               | net.darkhax.bookshelf |
 * | modid_name    | The name of the dependency.                       | Bookshelf-1.16.5      |
 * | modid_version | The artefact version of the dependency.           | 10.0.7                |
 * 
 * @param modid An ID used in logging and the names of properties.
 * @param defaultType The default type of dependency to create.
 * @param defaultGroup The default group for the maven coordinate. modid_group
 * @param defaultName The default name for the maven coordinate. modid_name
 * @param defaultVersion the default version for the maven coordinate. modid_version
 */
def deobfDep(modid, defaultType, defaultGroup, defaultName, defaultVersion) {

    if (getDefaultBoolean("${modid}_enabled")) {
    
        def depType = getDefaultString("${modid}_deptype", defaultType)
        def group = getDefaultString("${modid}_group", defaultGroup)
        def name = getDefaultString("${modid}_name", defaultName)
        def version = getDefaultString("${modid}_version", defaultVersion)
        
        project.logger.lifecycle("Dependency ${modid} added. ${depType} \'${group}:${name}:${version}\'")
        project.getDependencies().add(depType, fg.deobf("${group}:${name}:${version}"))
    }
    
    else {
    
        project.logger.warn("Dependency ${modid} has been disabled for this build.")
    }
}

ext {

    deobfDep = this.&deobDep
    deobfRuntime = this.&deobRuntime
    deobfCompile = this.&deobCompile
}